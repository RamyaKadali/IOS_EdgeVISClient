///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace IOS_EdgeVisClient
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Manage recording.
    /// </summary>
    [TestModule("1d35d2e8-ff85-42d0-8e8c-430ef378c065", ModuleType.Recording, 1)]
    public partial class Manage : ITestModule
    {
        /// <summary>
        /// Holds an instance of the IOS_EdgeVisClientRepository repository.
        /// </summary>
        public static IOS_EdgeVisClientRepository repo = IOS_EdgeVisClientRepository.Instance;

        static Manage instance = new Manage();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Manage()
        {
            varMobileDevice = "RamyaKadali’s iPhone";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Manage Instance
        {
            get { return instance; }
        }

#region Variables

        string _varMobileDevice;

        /// <summary>
        /// Gets or sets the value of variable varMobileDevice.
        /// </summary>
        [TestVariable("bbe92765-dbdd-48b9-86c5-51f96148c910")]
        public string varMobileDevice
        {
            get { return _varMobileDevice; }
            set { _varMobileDevice = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Application", "Run mobile app 'com.digitalbarriers.EdgeVis-Client' on device 'RamyaKadali’s iPhone'.", new RecordItemIndex(0));
            Host.Local.RunMobileApp("RamyaKadali’s iPhone", "com.digitalbarriers.EdgeVis-Client", true);
            Delay.Milliseconds(3500);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ComDigitalbarriersEdgeVisClient.UIWindow.MANAGE' at Center", repo.ComDigitalbarriersEdgeVisClient.UIWindow.MANAGEInfo, new RecordItemIndex(1));
            repo.ComDigitalbarriersEdgeVisClient.UIWindow.MANAGE.Touch();
            Delay.Milliseconds(300);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ComDigitalbarriersEdgeVisClient.UIWindow.EDIT' at Center", repo.ComDigitalbarriersEdgeVisClient.UIWindow.EDITInfo, new RecordItemIndex(2));
            repo.ComDigitalbarriersEdgeVisClient.UIWindow.EDIT.Touch();
            Delay.Milliseconds(300);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute Text to 'TestA' on item 'ComDigitalbarriersEdgeVisClient.UIWindow.Username'.", repo.ComDigitalbarriersEdgeVisClient.UIWindow.UsernameInfo, new RecordItemIndex(3));
            repo.ComDigitalbarriersEdgeVisClient.UIWindow.Username.Element.SetAttributeValue("Text", "TestA");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute Text to 'password' on item 'ComDigitalbarriersEdgeVisClient.UIWindow.Password'.", repo.ComDigitalbarriersEdgeVisClient.UIWindow.PasswordInfo, new RecordItemIndex(4));
            repo.ComDigitalbarriersEdgeVisClient.UIWindow.Password.Element.SetAttributeValue("Text", "password");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ComDigitalbarriersEdgeVisClient.UIWindow.SAVE' at Center", repo.ComDigitalbarriersEdgeVisClient.UIWindow.SAVEInfo, new RecordItemIndex(5));
            repo.ComDigitalbarriersEdgeVisClient.UIWindow.SAVE.Touch();
            Delay.Milliseconds(300);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ComDigitalbarriersEdgeVisClient.UIWindow.CONNECT' at Center", repo.ComDigitalbarriersEdgeVisClient.UIWindow.CONNECTInfo, new RecordItemIndex(6));
            repo.ComDigitalbarriersEdgeVisClient.UIWindow.CONNECT.Touch();
            Delay.Milliseconds(300);
            
            Report.Log(ReportLevel.Info, "Set value", "Setting attribute Text to 'password' on item 'ComDigitalbarriersEdgeVisClient.UIWindow.P2'.", repo.ComDigitalbarriersEdgeVisClient.UIWindow.P2Info, new RecordItemIndex(7));
            repo.ComDigitalbarriersEdgeVisClient.UIWindow.P2.Element.SetAttributeValue("Text", "password");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ComDigitalbarriersEdgeVisClient.UIWindow.CONNECT1' at Center", repo.ComDigitalbarriersEdgeVisClient.UIWindow.CONNECT1Info, new RecordItemIndex(8));
            repo.ComDigitalbarriersEdgeVisClient.UIWindow.CONNECT1.Touch();
            Delay.Milliseconds(300);
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating Exists on item 'ComDigitalbarriersEdgeVisClient.UIWindow.IsTheFrontEndApplicationFromDigita1'.", repo.ComDigitalbarriersEdgeVisClient.UIWindow.IsTheFrontEndApplicationFromDigita1Info, new RecordItemIndex(9));
            //Validate.Exists(repo.ComDigitalbarriersEdgeVisClient.UIWindow.IsTheFrontEndApplicationFromDigita1Info);
            //Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ComDigitalbarriersEdgeVisClient.UIWindow.ButtonOK1' at Center", repo.ComDigitalbarriersEdgeVisClient.UIWindow.ButtonOK1Info, new RecordItemIndex(10));
            repo.ComDigitalbarriersEdgeVisClient.UIWindow.ButtonOK1.Touch();
            Delay.Milliseconds(300);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ComDigitalbarriersEdgeVisClient.UIWindow.RightsideOptions' at Center", repo.ComDigitalbarriersEdgeVisClient.UIWindow.RightsideOptionsInfo, new RecordItemIndex(11));
            repo.ComDigitalbarriersEdgeVisClient.UIWindow.RightsideOptions.Touch();
            Delay.Milliseconds(300);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'ComDigitalbarriersEdgeVisClient.UIWindow.LogOutTestA1' at Center", repo.ComDigitalbarriersEdgeVisClient.UIWindow.LogOutTestA1Info, new RecordItemIndex(12));
            repo.ComDigitalbarriersEdgeVisClient.UIWindow.LogOutTestA1.Touch();
            Delay.Milliseconds(300);
            
            Report.Log(ReportLevel.Info, "Application", "Closing application containing item 'ComDigitalbarriersEdgeVisClient'.", repo.ComDigitalbarriersEdgeVisClient.SelfInfo, new RecordItemIndex(13));
            Host.Current.CloseApplication(repo.ComDigitalbarriersEdgeVisClient.Self, new Duration(0));
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
